openapi: 3.0.1

info:
  title: Hacker News
  version: 1.0.0
  description: "This is the Open API documentation for the REST API of our beloved application **Hacker News** deployed at <https://asw-hackernews-kaai12.herokuapp.com/>. <br>All operations are executable."

servers:
- url: http://18.206.152.198:8080/api
- url: http://54.158.190.88:8080/api
- url: http://3.214.224.98:8080/api
- url: http://54.224.50.67:8080/api

paths:
  /contributions:
    get:
      tags: 
        - contributions
      summary: Returns all URL tpye contributions
      operationId: index
      responses:
        200:
          description: Successful request
          content:
            application/json:
              schema:
                title: ArrayOfContributions
                type: array
                items:
                  $ref: '#/components/schemas/Contribution'
                  
    post:
        tags:
          - contributions
        summary: Create a contribution
        operationId: contribution_create
        requestBody:
          description: Attributes needed to create a contribution.
          content:
            application/json:
              schema:
                required:
                - Contribution
                type: object
                properties:
                  title:
                    type: string
                    example: 'this is a contribution title'
                  url:
                    type: string
                    example: 'https://editor.swagger.io/'
                  text:
                    type: string
                    example: 'if this is not empty, text will be a comment of a post of type url'
          required: true
        
        responses:
          200:
            description: Contribution with the URL that already exists
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Contribution'
          201:
            description: Contribution created successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Contribution'
          400:
            description: 'Error: Bad Request'
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResult'
                examples:
                  Error blank Title:
                    $ref: '#/components/examples/error400TitleBlank'
                  Error invalid Url:
                    $ref: '#/components/examples/error400InvalidUrl'
                  Error Url and Text are blank:
                    $ref: '#/components/examples/error400UrlAndTextBlank'
        security:
        - ApiKeyAuth: []
      
  /newest:
    get:
      tags: 
        - contributions
      summary: Returns all contributions ordered by time of creation
      operationId: newest
      responses:
        200:
          description: Successful request
          content:
            application/json:
              schema:
                title: ArrayOfContributions
                type: array
                items:
                  $ref: '#/components/schemas/Contribution'
  /ask:
    get:
      tags:
        - contributions
      summary: Return contributions of type "ask"
      operationId: ask
      responses:
        200:
          description: Successful request
          content:
            application/json:
              schema:
                title: ArrayOfContributions
                type: array
                items:
                  $ref: '#/components/schemas/Contribution'
                  
  /contributions/{id}:
    get:
      tags:
        - contributions
      summary: Return a contribution from an ID
      operationId: showContribution
      parameters:
        - name: id
          in: path
          description: ID of the contribution
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contribution'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404C'
    delete:
      tags:
        - contributions
      summary: Delete a contribution from an ID
      operationId: deleteContribution
      parameters:
        - name: id
          in: path
          description: ID of the contribution
          required: true
          schema:
            type: integer
            format: int64
      responses: 
        204:
          description: Contribution deleted
          content:
            application/json: {}
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                ContributionNotFound:
                  $ref: '#/components/examples/error404C'
        401:
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                NoApiKey:
                  $ref: '#/components/examples/error401'
        403:
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                ApiKeyNotValid:
                  $ref: '#/components/examples/error403'
                ContributionDoesNotBelong:
                  $ref: '#/components/examples/error403ContributionDoesNotBelong'

      security:
      - ApiKeyAuth: []
                  
  /contributions/users/{id}:
    get:
      tags:
        - contributions
      summary: Return contributions from a user
      operationId: showcontributoinsofuser
      parameters:
        - name: id
          in: path
          description: ID of the user
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Successful request
          content:
            application/json:
              schema:
                title: ArrayOfContributions
                type: array
                items:
                  $ref: '#/components/schemas/Contribution'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404U'
                 
  /contributions/{id}/likes:
    post:
      tags:
        - contributions
      summary: Vote a contribution
      operationId: votecontribution
      parameters:
        - name: id
          in: path
          description: ID of the contribution
          required: true
          schema:
            type: integer
            format: int64
      responses:
        201:
          description: Contribution voted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoteContribution'
        400:
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400InvalidIdContribution'
      security:
      - ApiKeyAuth: []
    
    delete:
      tags:
        - contributions
      summary: Unvote a contribution
      operationId: unvotecontribution
      parameters:
        - name: id
          in: path
          description: ID of the contribution
          required: true
          schema:
            type: integer
            format: int64
      responses:
        204:
          description: Contribution unvoted succesfully or not voted previously
          content:
            application/json:
              {}
        401:
          description: 'Error: Unauthorized request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        403:
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
        404:
          description: 'Error: Not Found'
          content: 
            application/json:
             schema:
                $ref: '#/components/schemas/ErrorResult'
             examples:
                errorExample:
                  $ref: '#/components/examples/error404C'
        
      security:
      - ApiKeyAuth: []
      
        
  /contributions/{id}/comments:
    get:
      tags:
        - comments
      summary: Comments of a contribution
      operationId: commentsofacontribution
      parameters:
        - name: id
          in: path
          description: ID of the contribution
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        404:
          description: 'Error: Not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404C'
  
  /comments/{id}/replies:
    get:
      tags:
        - replies
      summary: Replies of a comment
      operationId: repliesofacomment
      parameters:
        - name: id
          in : path
          description: ID of the comment
          required: true 
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reply'
        404:
          description: 'Error: Not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404COM'
                
  /users/{id}:
    get:
      tags:
        - users
      summary: Return an user from an id
      operationId: showUser
      parameters:
        - name: id
          in: path
          description: ID of the user
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Succesfull request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404U'
    put:
      tags:
        - users
      summary: Updates the user with the information given in the request
      operationId: updateUser
      requestBody:
        description: Provide the new description of the user and the api key
        content:
          application/json:
            schema:
              required:
              - ApiKey
              - About
              type: object
              properties:
                ApiKey:
                  type: string
                  minLength: 4
                  example: 'faskldjhfakljsdhfkljadshfuq'
                About:
                  type: string
                  minLength: 4
                  maxLength: 280
                  example: 'Como está mi hente? :D'
        required: true
      parameters:
        - name: id
          in: path
          description: ID of the user to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Succesfull request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404U'
            
          
components:
  schemas:
    Contribution:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier representing the contribution
          example: 1
        title:
          type: string
          description: Title of the contribution
          example: Hello World!
        url:
          type: string
          description: URL of the contribution (must be unique)
          example: https://www.google.es/
        text:
          type: string
          description: Text of the contribution (converts to comment if URL present)
          example: Lorem ipsum dolor sit amet consectetur adipiscing elit, parturient sociis eros semper elementum erat pulvinar at, nunc tortor aliquet arcu pretium ad.
        creator:
          type: string
          description: Creator of the contribution
          example: cfarre
        created_at:
          type: string
          format: date-time
          description: Date and time of the contribution's creation
          example: "2020-11-25 14:04:56"
        updated_at:
          type: string
          format: date-time
          description: Date and time of the most recent contribution's update
          example: "2020-11-25 15:04:56"
        points:
          type: integer
          format: int64
          description: Points of the contribution
          example: 120
    Comment:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier representing the comment
          example: 1
        content:
          type: string
          description: Content of the comment
          example: Nice contribution!
        creator:
          type: string
          description: Creator of the comment
          example: cfarre
        contribution_id:
          type: integer
          format: int64
          description: Unique identifier representing the contribution where the comment is being submitted
          example: 1
        created_at:
          type: string
          format: date-time
          description: Date and time of the comment's creation
          example: "2020-11-25 14:04:56"
        updated_at:
          type: string
          format: date-time
          description: Date and time of the most recent comment's update
          example: "2020-11-25 15:04:56"
        points:
          type: integer
          format: int64
          description: Points of the comment
          example: 120
    Like:
      type: object
      properties:
        id: 
          type: integer
          format: int64
          description: Unique identifier representing the like
          example: 37
        contribution_id:
          type: integer
          format: int64
          description: Unique identifier representing the contribution which the like is being given
          example: 1
        comment_id:
          type: integer
          format: int64
          description: Unique identifier representing the comment which the like is being given
          example: 2
        reply_id:
          type: integer
          format: int64
          description: Unique identifier representing the reply which the like is being given
          example: 3
        user_id:
          type: integer
          format: int64
          description: Unique identifier representing the user who liked
          example: 4
    Reply:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier representing the reply
        content:
          type: string
          description: Content of the reply
          example: Nice comment!
        creator:
          type: string
          description: Creator of the reply
          example: cfarre
        comment_id:
          type: integer
          format: int64
          description: Unique identifier representing the comment where the reply is being posted
          example: 2
        reply_id:
          type: integer
          format: int64
          description: Unique identifier representing the parent reply where the new reply is being posted
          example: 5
        created_at:
          type: string
          format: date-time
          description: Date and time of the reply's creation
          example: "2020-11-25 14:04:56"
        updated_at:
          type: string
          format: date-time
          description: Date and time of the most recent reply's update
          example: "2020-11-25 15:04:56"
        points:
          type: integer
          format: int64
          description: Points of the reply
          example: 120
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier representing the user
          example: 10
        email:
          type: string
          description: Username of the user extracted from the email
          example: carles.farre
        name:
          type: string
          description: Name of the user
          example: Carles Farré
        about:
          type: string
          description: Little description about the user
          example: Currently working on ASW
        karma:
          type: integer
          format: int64
          description: Karma of the user
          example: 500
        created_at:
          type: string
          format: date-time
          description: Date and time of the user's creation
          example: "2020-11-25 14:04:56"
        updated_at:
          type: string
          format: date-time
          description: Date and time of the most recent user's update
          example: "2020-11-25 15:04:56"
    VoteContribution:
      type: object
      properties:
        new_like:
          $ref: '#/components/schemas/Like'
        api_key:
          type: string
          example: "MjAyMC0wNC0xOCAxMjoyODo0MSBVVEM=\n"
    ErrorResult:
      type: object
      properties:
        status:
          type: integer
          enum: [400, 401, 403, 404, 409]
        error: 
          type: string
          enum: ["Bad Request", "Unauthorized", "Forbidden", "Not Found", "Conflict"]
        message: 
          type: string
  examples:
    error400InvalidUrl:
      value:
        status: 400
        error: "Bad Request"
        message: "Invalid URL"
    error400InvalidIdContribution:
      value:
        status: 400
        error: "Bad Request"
        message: "Invalid contribution ID"
    error400UrlAndTextBlank:
      value:
        status: 400
        error: "Bad Request"
        message: "URL and Text can't be blank at the same time"
    error400TitleBlank:
      value:
        status: 400
        error: "Bad Request"
        message: "Title can't be blank"
    error401:
      value:
        status: 401
        error: "Unauthorized"
        message: "You provided no api key (X-API-KEY Header)"
    error403:
      value:
        status: 403
        error: "Forbidden"
        message: "Your api key (X-API-KEY Header) is not valid"
    error403ContributionDoesNotBelong:
      value:
        status: 403
        error: "Forbidden"
        message: "This contribution does not belong to you"
    error404U:
      value:
        status: 404
        error: "Not Found"
        message: "No User with that ID"
    error404C:
      value:
        status: 404
        error: "Not Found"
        message: "No Contribution with that ID"
    error404COM:
      value:
        status: 404
        error : "Not Found"
        message : "No Comment with that ID"
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: X-API-KEY #Custom headers in rails apps must have the X- prefix
      in: header